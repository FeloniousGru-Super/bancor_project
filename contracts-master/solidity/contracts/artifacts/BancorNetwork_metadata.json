{
	"compiler": {
		"version": "0.4.26+commit.4563c3fc"
	},
	"language": "Solidity",
	"output": {
		"abi": [
			{
				"constant": false,
				"inputs": [
					{
						"name": "_token",
						"type": "address"
					},
					{
						"name": "_register",
						"type": "bool"
					}
				],
				"name": "registerEtherToken",
				"outputs": [],
				"payable": false,
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"constant": false,
				"inputs": [
					{
						"name": "_signerAddress",
						"type": "address"
					}
				],
				"name": "setSignerAddress",
				"outputs": [],
				"payable": false,
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"constant": true,
				"inputs": [
					{
						"name": "_path",
						"type": "address[]"
					},
					{
						"name": "_amount",
						"type": "uint256"
					}
				],
				"name": "getReturnByPath",
				"outputs": [
					{
						"name": "",
						"type": "uint256"
					},
					{
						"name": "",
						"type": "uint256"
					}
				],
				"payable": false,
				"stateMutability": "view",
				"type": "function"
			},
			{
				"constant": true,
				"inputs": [],
				"name": "BANCOR_CONVERTER_UPGRADER",
				"outputs": [
					{
						"name": "",
						"type": "bytes32"
					}
				],
				"payable": false,
				"stateMutability": "view",
				"type": "function"
			},
			{
				"constant": false,
				"inputs": [
					{
						"name": "_path",
						"type": "address[]"
					},
					{
						"name": "_amount",
						"type": "uint256"
					},
					{
						"name": "_minReturn",
						"type": "uint256"
					},
					{
						"name": "_for",
						"type": "address"
					},
					{
						"name": "_block",
						"type": "uint256"
					},
					{
						"name": "_nonce",
						"type": "uint256"
					},
					{
						"name": "_v",
						"type": "uint8"
					},
					{
						"name": "_r",
						"type": "bytes32"
					},
					{
						"name": "_s",
						"type": "bytes32"
					}
				],
				"name": "convertForPrioritized",
				"outputs": [
					{
						"name": "",
						"type": "uint256"
					}
				],
				"payable": true,
				"stateMutability": "payable",
				"type": "function"
			},
			{
				"constant": true,
				"inputs": [],
				"name": "BNT_TOKEN",
				"outputs": [
					{
						"name": "",
						"type": "bytes32"
					}
				],
				"payable": false,
				"stateMutability": "view",
				"type": "function"
			},
			{
				"constant": true,
				"inputs": [],
				"name": "CONTRACT_REGISTRY",
				"outputs": [
					{
						"name": "",
						"type": "bytes32"
					}
				],
				"payable": false,
				"stateMutability": "view",
				"type": "function"
			},
			{
				"constant": true,
				"inputs": [],
				"name": "BANCOR_CONVERTER_FACTORY",
				"outputs": [
					{
						"name": "",
						"type": "bytes32"
					}
				],
				"payable": false,
				"stateMutability": "view",
				"type": "function"
			},
			{
				"constant": true,
				"inputs": [],
				"name": "signerAddress",
				"outputs": [
					{
						"name": "",
						"type": "address"
					}
				],
				"payable": false,
				"stateMutability": "view",
				"type": "function"
			},
			{
				"constant": false,
				"inputs": [
					{
						"name": "_token",
						"type": "address"
					},
					{
						"name": "_to",
						"type": "address"
					},
					{
						"name": "_amount",
						"type": "uint256"
					}
				],
				"name": "withdrawTokens",
				"outputs": [],
				"payable": false,
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"constant": true,
				"inputs": [],
				"name": "BNT_CONVERTER",
				"outputs": [
					{
						"name": "",
						"type": "bytes32"
					}
				],
				"payable": false,
				"stateMutability": "view",
				"type": "function"
			},
			{
				"constant": false,
				"inputs": [
					{
						"name": "_path",
						"type": "address[]"
					},
					{
						"name": "_amount",
						"type": "uint256"
					},
					{
						"name": "_minReturn",
						"type": "uint256"
					},
					{
						"name": "_toBlockchain",
						"type": "bytes32"
					},
					{
						"name": "_to",
						"type": "bytes32"
					},
					{
						"name": "_conversionId",
						"type": "uint256"
					},
					{
						"name": "_block",
						"type": "uint256"
					},
					{
						"name": "_v",
						"type": "uint8"
					},
					{
						"name": "_r",
						"type": "bytes32"
					},
					{
						"name": "_s",
						"type": "bytes32"
					}
				],
				"name": "xConvertPrioritized",
				"outputs": [
					{
						"name": "",
						"type": "uint256"
					}
				],
				"payable": true,
				"stateMutability": "payable",
				"type": "function"
			},
			{
				"constant": false,
				"inputs": [
					{
						"name": "_path",
						"type": "address[]"
					},
					{
						"name": "_amount",
						"type": "uint256"
					},
					{
						"name": "_minReturn",
						"type": "uint256"
					},
					{
						"name": "_for",
						"type": "address"
					},
					{
						"name": "_block",
						"type": "uint256"
					},
					{
						"name": "_v",
						"type": "uint8"
					},
					{
						"name": "_r",
						"type": "bytes32"
					},
					{
						"name": "_s",
						"type": "bytes32"
					}
				],
				"name": "convertForPrioritized2",
				"outputs": [
					{
						"name": "",
						"type": "uint256"
					}
				],
				"payable": true,
				"stateMutability": "payable",
				"type": "function"
			},
			{
				"constant": true,
				"inputs": [],
				"name": "BANCOR_FORMULA",
				"outputs": [
					{
						"name": "",
						"type": "bytes32"
					}
				],
				"payable": false,
				"stateMutability": "view",
				"type": "function"
			},
			{
				"constant": false,
				"inputs": [],
				"name": "acceptOwnership",
				"outputs": [],
				"payable": false,
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"constant": true,
				"inputs": [],
				"name": "registry",
				"outputs": [
					{
						"name": "",
						"type": "address"
					}
				],
				"payable": false,
				"stateMutability": "view",
				"type": "function"
			},
			{
				"constant": true,
				"inputs": [
					{
						"name": "",
						"type": "address"
					}
				],
				"name": "etherTokens",
				"outputs": [
					{
						"name": "",
						"type": "bool"
					}
				],
				"payable": false,
				"stateMutability": "view",
				"type": "function"
			},
			{
				"constant": true,
				"inputs": [],
				"name": "CONTRACT_FEATURES",
				"outputs": [
					{
						"name": "",
						"type": "bytes32"
					}
				],
				"payable": false,
				"stateMutability": "view",
				"type": "function"
			},
			{
				"constant": true,
				"inputs": [
					{
						"name": "",
						"type": "bytes32"
					}
				],
				"name": "conversionHashes",
				"outputs": [
					{
						"name": "",
						"type": "bool"
					}
				],
				"payable": false,
				"stateMutability": "view",
				"type": "function"
			},
			{
				"constant": true,
				"inputs": [],
				"name": "owner",
				"outputs": [
					{
						"name": "",
						"type": "address"
					}
				],
				"payable": false,
				"stateMutability": "view",
				"type": "function"
			},
			{
				"constant": true,
				"inputs": [],
				"name": "BANCOR_NETWORK",
				"outputs": [
					{
						"name": "",
						"type": "bytes32"
					}
				],
				"payable": false,
				"stateMutability": "view",
				"type": "function"
			},
			{
				"constant": true,
				"inputs": [],
				"name": "BANCOR_GAS_PRICE_LIMIT",
				"outputs": [
					{
						"name": "",
						"type": "bytes32"
					}
				],
				"payable": false,
				"stateMutability": "view",
				"type": "function"
			},
			{
				"constant": true,
				"inputs": [],
				"name": "CONVERTER_CONVERSION_WHITELIST",
				"outputs": [
					{
						"name": "",
						"type": "uint256"
					}
				],
				"payable": false,
				"stateMutability": "view",
				"type": "function"
			},
			{
				"constant": false,
				"inputs": [
					{
						"name": "_registry",
						"type": "address"
					}
				],
				"name": "setRegistry",
				"outputs": [],
				"payable": false,
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"constant": false,
				"inputs": [
					{
						"name": "_path",
						"type": "address[]"
					},
					{
						"name": "_amount",
						"type": "uint256"
					},
					{
						"name": "_minReturn",
						"type": "uint256"
					},
					{
						"name": "_for",
						"type": "address"
					}
				],
				"name": "claimAndConvertFor",
				"outputs": [
					{
						"name": "",
						"type": "uint256"
					}
				],
				"payable": false,
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"constant": false,
				"inputs": [
					{
						"name": "_path",
						"type": "address[]"
					},
					{
						"name": "_amount",
						"type": "uint256"
					},
					{
						"name": "_minReturn",
						"type": "uint256"
					},
					{
						"name": "_for",
						"type": "address"
					},
					{
						"name": "_customVal",
						"type": "uint256"
					},
					{
						"name": "_block",
						"type": "uint256"
					},
					{
						"name": "_v",
						"type": "uint8"
					},
					{
						"name": "_r",
						"type": "bytes32"
					},
					{
						"name": "_s",
						"type": "bytes32"
					}
				],
				"name": "convertForPrioritized3",
				"outputs": [
					{
						"name": "",
						"type": "uint256"
					}
				],
				"payable": true,
				"stateMutability": "payable",
				"type": "function"
			},
			{
				"constant": true,
				"inputs": [],
				"name": "BANCOR_X",
				"outputs": [
					{
						"name": "",
						"type": "bytes32"
					}
				],
				"payable": false,
				"stateMutability": "view",
				"type": "function"
			},
			{
				"constant": false,
				"inputs": [
					{
						"name": "_path",
						"type": "address[]"
					},
					{
						"name": "_amount",
						"type": "uint256"
					},
					{
						"name": "_minReturn",
						"type": "uint256"
					},
					{
						"name": "_toBlockchain",
						"type": "bytes32"
					},
					{
						"name": "_to",
						"type": "bytes32"
					},
					{
						"name": "_conversionId",
						"type": "uint256"
					}
				],
				"name": "xConvert",
				"outputs": [
					{
						"name": "",
						"type": "uint256"
					}
				],
				"payable": true,
				"stateMutability": "payable",
				"type": "function"
			},
			{
				"constant": false,
				"inputs": [
					{
						"name": "_path",
						"type": "address[]"
					},
					{
						"name": "_amount",
						"type": "uint256"
					},
					{
						"name": "_minReturn",
						"type": "uint256"
					}
				],
				"name": "claimAndConvert",
				"outputs": [
					{
						"name": "",
						"type": "uint256"
					}
				],
				"payable": false,
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"constant": false,
				"inputs": [
					{
						"name": "_path",
						"type": "address[]"
					},
					{
						"name": "_amount",
						"type": "uint256"
					},
					{
						"name": "_minReturn",
						"type": "uint256"
					},
					{
						"name": "_for",
						"type": "address"
					}
				],
				"name": "convertFor",
				"outputs": [
					{
						"name": "",
						"type": "uint256"
					}
				],
				"payable": true,
				"stateMutability": "payable",
				"type": "function"
			},
			{
				"constant": true,
				"inputs": [],
				"name": "BANCOR_X_UPGRADER",
				"outputs": [
					{
						"name": "",
						"type": "bytes32"
					}
				],
				"payable": false,
				"stateMutability": "view",
				"type": "function"
			},
			{
				"constant": true,
				"inputs": [],
				"name": "newOwner",
				"outputs": [
					{
						"name": "",
						"type": "address"
					}
				],
				"payable": false,
				"stateMutability": "view",
				"type": "function"
			},
			{
				"constant": false,
				"inputs": [
					{
						"name": "_newOwner",
						"type": "address"
					}
				],
				"name": "transferOwnership",
				"outputs": [],
				"payable": false,
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"constant": false,
				"inputs": [
					{
						"name": "_path",
						"type": "address[]"
					},
					{
						"name": "_amount",
						"type": "uint256"
					},
					{
						"name": "_minReturn",
						"type": "uint256"
					}
				],
				"name": "convert",
				"outputs": [
					{
						"name": "",
						"type": "uint256"
					}
				],
				"payable": true,
				"stateMutability": "payable",
				"type": "function"
			},
			{
				"constant": true,
				"inputs": [],
				"name": "NON_STANDARD_TOKEN_REGISTRY",
				"outputs": [
					{
						"name": "",
						"type": "bytes32"
					}
				],
				"payable": false,
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [
					{
						"name": "_registry",
						"type": "address"
					}
				],
				"payable": false,
				"stateMutability": "nonpayable",
				"type": "constructor"
			},
			{
				"anonymous": false,
				"inputs": [
					{
						"indexed": true,
						"name": "_prevOwner",
						"type": "address"
					},
					{
						"indexed": true,
						"name": "_newOwner",
						"type": "address"
					}
				],
				"name": "OwnerUpdate",
				"type": "event"
			}
		],
		"devdoc": {
			"methods": {
				"acceptOwnership()": {
					"details": "used by a new owner to accept an ownership transfer"
				},
				"claimAndConvert(address[],uint256,uint256)": {
					"details": "claims the caller's tokens, converts them to any other token in the bancor network by following a predefined conversion path and transfers the result tokens back to the sender note that allowance must be set beforehand",
					"params": {
						"_amount": "amount to convert from (in the initial source token)",
						"_minReturn": "if the conversion results in an amount smaller than the minimum return - it is cancelled, must be nonzero",
						"_path": "conversion path, see conversion path format above"
					},
					"return": "tokens issued in return"
				},
				"claimAndConvertFor(address[],uint256,uint256,address)": {
					"details": "claims the caller's tokens, converts them to any other token in the bancor network by following a predefined conversion path and transfers the result tokens to a target account note that allowance must be set beforehand",
					"params": {
						"_amount": "amount to convert from (in the initial source token)",
						"_for": "account that will receive the conversion result",
						"_minReturn": "if the conversion results in an amount smaller than the minimum return - it is cancelled, must be nonzero",
						"_path": "conversion path, see conversion path format above"
					},
					"return": "tokens issued in return"
				},
				"convert(address[],uint256,uint256)": {
					"details": "converts the token to any other token in the bancor network by following a predefined conversion path and transfers the result tokens back to the sender note that the converter should already own the source tokens",
					"params": {
						"_amount": "amount to convert from (in the initial source token)",
						"_minReturn": "if the conversion results in an amount smaller than the minimum return - it is cancelled, must be nonzero",
						"_path": "conversion path, see conversion path format above"
					},
					"return": "tokens issued in return"
				},
				"convertFor(address[],uint256,uint256,address)": {
					"details": "converts the token to any other token in the bancor network by following a predefined conversion path and transfers the result tokens to a target account note that the converter should already own the source tokens",
					"params": {
						"_amount": "amount to convert from (in the initial source token)",
						"_for": "account that will receive the conversion result",
						"_minReturn": "if the conversion results in an amount smaller than the minimum return - it is cancelled, must be nonzero",
						"_path": "conversion path, see conversion path format above"
					},
					"return": "tokens issued in return"
				},
				"convertForPrioritized3(address[],uint256,uint256,address,uint256,uint256,uint8,bytes32,bytes32)": {
					"details": "converts the token to any other token in the bancor network by following a predefined conversion path and transfers the result tokens to a target account. this version of the function also allows the verified signer to bypass the universal gas price limit. note that the converter should already own the source tokens",
					"params": {
						"_amount": "amount to convert from (in the initial source token)",
						"_block": "if the current block exceeded the given parameter - it is cancelled",
						"_customVal": "custom value that was signed for prioritized conversion",
						"_for": "account that will receive the conversion result",
						"_minReturn": "if the conversion results in an amount smaller than the minimum return - it is cancelled, must be nonzero",
						"_path": "conversion path, see conversion path format above",
						"_r": "(signature[0:64]) associated with the signer address and helps to validate if the signature is legit",
						"_s": "(signature[64:128]) associated with the signer address and helps to validate if the signature is legit",
						"_v": "(signature[128:130]) associated with the signer address and helps to validate if the signature is legit"
					},
					"return": "tokens issued in return"
				},
				"getReturnByPath(address[],uint256)": {
					"details": "returns the expected return amount for converting a specific amount by following a given conversion path. notice that there is no support for circular paths.",
					"params": {
						"_amount": "amount to convert from (in the initial source token)",
						"_path": "conversion path, see conversion path format above"
					},
					"return": "expected conversion return amount and conversion fee"
				},
				"registerEtherToken(address,bool)": {
					"details": "allows the owner to register/unregister ether tokens",
					"params": {
						"_register": "true to register, false to unregister",
						"_token": "ether token contract address"
					}
				},
				"transferOwnership(address)": {
					"details": "allows transferring the contract ownership the new owner still needs to accept the transfer can only be called by the contract owner",
					"params": {
						"_newOwner": "new contract owner"
					}
				},
				"withdrawTokens(address,address,uint256)": {
					"details": "withdraws tokens held by the contract and sends them to an account can only be called by the owner",
					"params": {
						"_amount": "amount to withdraw",
						"_to": "account to receive the new amount",
						"_token": "ERC20 token contract address"
					}
				},
				"xConvert(address[],uint256,uint256,bytes32,bytes32,uint256)": {
					"details": "converts any other token to BNT in the bancor network by following a predefined conversion path and transfers the resulting tokens to BancorX. note that the network should already have been given allowance of the source token (if not ETH)",
					"params": {
						"_amount": "amount to convert from (in the initial source token)",
						"_conversionId": "pre-determined unique (if non zero) id which refers to this transaction ",
						"_minReturn": "if the conversion results in an amount smaller than the minimum return - it is cancelled, must be nonzero",
						"_path": "conversion path, see conversion path format above",
						"_to": "address/account on _toBlockchain to send the BNT to",
						"_toBlockchain": "blockchain BNT will be issued on"
					},
					"return": "the amount of BNT received from this conversion"
				},
				"xConvertPrioritized(address[],uint256,uint256,bytes32,bytes32,uint256,uint256,uint8,bytes32,bytes32)": {
					"details": "converts any other token to BNT in the bancor network by following a predefined conversion path and transfers the resulting tokens to BancorX. this version of the function also allows the verified signer to bypass the universal gas price limit. note that the network should already have been given allowance of the source token (if not ETH)",
					"params": {
						"_amount": "amount to convert from (in the initial source token)",
						"_block": "if the current block exceeded the given parameter - it is cancelled",
						"_conversionId": "pre-determined unique (if non zero) id which refers to this transaction ",
						"_minReturn": "if the conversion results in an amount smaller than the minimum return - it is cancelled, must be nonzero",
						"_path": "conversion path, see conversion path format above",
						"_r": "(signature[0:64]) associated with the signer address and helps to validate if the signature is legit",
						"_s": "(signature[64:128]) associated with the signer address and helps to validate if the signature is legit",
						"_to": "address/account on _toBlockchain to send the BNT to",
						"_toBlockchain": "blockchain BNT will be issued on",
						"_v": "(signature[128:130]) associated with the signer address and helps to validate if the signature is legit"
					},
					"return": "the amount of BNT received from this conversion"
				}
			}
		},
		"userdoc": {
			"methods": {}
		}
	},
	"settings": {
		"compilationTarget": {
			"contracts/BancorNetwork.sol": "BancorNetwork"
		},
		"evmVersion": "byzantium",
		"libraries": {},
		"optimizer": {
			"enabled": false,
			"runs": 200
		},
		"remappings": []
	},
	"sources": {
		"contracts/BancorNetwork.sol": {
			"keccak256": "0xa3fa63e1736ee1828f496b26d405d2cfbc85c28a9f52bb34ebced33edd84c7e2",
			"urls": [
				"bzzr://f99e05705b41d08940a417ef8e7ab94f2e87e87e461e9f7ccbbfaebd88d8a0bc"
			]
		},
		"contracts/ContractIds.sol": {
			"keccak256": "0x797ef82b25e32d08de1df3cf988c9e25b1b0aa6d3c7cabfc959ea3aaa2e1b8bb",
			"urls": [
				"bzzr://050610331e8915acbf660d1650d4dafb4f49423cfa70b76fb99898db93e765eb"
			]
		},
		"contracts/FeatureIds.sol": {
			"keccak256": "0x23a2281d958edbf84b1fc22540f3937e280f88da34da1d9fe2f2c3530896506e",
			"urls": [
				"bzzr://d422d034b140b4edae0d7dba138f9d8975e15a069f761595ab7853ba2e2d0982"
			]
		},
		"contracts/IBancorNetwork.sol": {
			"keccak256": "0xfa7c9e62eeb6dc7a69e98901c680859ff66a165c6a0fc113cea54e8d24be56e5",
			"urls": [
				"bzzr://2cbda6d76981f798ab94410ebb17728e8884222cd37fb79c34b861b242b1f3bc"
			]
		},
		"contracts/bancorx/interfaces/IBancorX.sol": {
			"keccak256": "0x23d2f7e6d9f9028d547860714cf0494ee508ba525f1d50ecdb05665a04908cea",
			"urls": [
				"bzzr://4062f3a5102874394adffa0b616e2f9bf7faa0dc37cc9611505e2943e451cc0a"
			]
		},
		"contracts/converter/interfaces/IBancorConverter.sol": {
			"keccak256": "0x2af1dc3731bc3d9c2b6b9f512fd04face50efc7c253a31552ce1121a80ec89c1",
			"urls": [
				"bzzr://4f258d6672c4e44ad1bd19ca0d6072181e1634d06d9250a0b1dd0d1d7351cbf2"
			]
		},
		"contracts/converter/interfaces/IBancorFormula.sol": {
			"keccak256": "0x74e9b0c619770252c5bd6cbb5b707849c13cd9cb089689f003359a8d4538c063",
			"urls": [
				"bzzr://16e3303e7fb66363b4e6ce4b59066a3fec0882a0ea99775795cc819ae44d3a1d"
			]
		},
		"contracts/converter/interfaces/IBancorGasPriceLimit.sol": {
			"keccak256": "0xe4beb2c3258ba72fb8a9e901fa451eaabde77a40ff540c18181b71b4149e7c88",
			"urls": [
				"bzzr://c867e635590ea2a27b60d80cd89bdca75fbd6a8d1c3abd894790464ea68d0435"
			]
		},
		"contracts/token/interfaces/IERC20Token.sol": {
			"keccak256": "0x465f98ed290fb4f65f2d74e938f47c2fa9f7302e766266d8f9326d4c703d5ce3",
			"urls": [
				"bzzr://9746fbda9ee3a4d1e0ed3c5f5d27ebb93114139ad29ae04f313de057f9d1bc92"
			]
		},
		"contracts/token/interfaces/IEtherToken.sol": {
			"keccak256": "0x7219a36940e2768913dc856d405f46378697b600fbd86717d8a444e701797bce",
			"urls": [
				"bzzr://473180ce9909ef17c50f675b7092a127114e9138409294f92a062566e6927ae3"
			]
		},
		"contracts/token/interfaces/INonStandardERC20.sol": {
			"keccak256": "0x26596dd8e564493f7e821102865fb382c21bbedd44ebc920c8d63626f1bf19dc",
			"urls": [
				"bzzr://c750029c9ba7521fbe0c1827a4854a4b8db274d4402e00daaa4683a024c44d93"
			]
		},
		"contracts/token/interfaces/ISmartToken.sol": {
			"keccak256": "0xd9369c561a659cdf78c9b7ad6458c5fd566296bc743f06011b5b02ffeadf0310",
			"urls": [
				"bzzr://b3f5f823967d07420b2c919fb28a51f94206f541124f4f63d835285d0fff8910"
			]
		},
		"contracts/utility/Owned.sol": {
			"keccak256": "0x420234d13d5a10debece92f5264fe4e548d38e4ddba4bb0fae67f121efb5cfb8",
			"urls": [
				"bzzr://6a0a7136d5633bc5e94e7b5f7fd84df2949ec87061ef16d4cb5ec869ebc6de3d"
			]
		},
		"contracts/utility/SafeMath.sol": {
			"keccak256": "0xcc762e1392acd929f86bc79f2d553fefa6692756d84640d3d4530db81bfdae3a",
			"urls": [
				"bzzr://d78ab9d7e21198a64398840779fce2f9631685aab56066e4dbb0826950f40a35"
			]
		},
		"contracts/utility/TokenHolder.sol": {
			"keccak256": "0xea5c8f330999bb5e7360127d38d5a1ce4b1a4b85392c28da43b8c2238884b3c0",
			"urls": [
				"bzzr://6415cecbff420d0f0e0568b73f182000c0bc3d0c1b48930bc84392d1b6c29e03"
			]
		},
		"contracts/utility/Utils.sol": {
			"keccak256": "0x4aaa2acf58cbeaed5f484bdca75daf7caacde07d62ca44b97f020381fc8801e3",
			"urls": [
				"bzzr://feed4fa84f6d4ea9f8e2520e8748cc4e7f8cf2104c8dcdff086db6129fba6f10"
			]
		},
		"contracts/utility/interfaces/IAddressList.sol": {
			"keccak256": "0x3de4d53e90ce340cf45e9fde143fa6956ff0ab2c40a8ac7f155995ab09736390",
			"urls": [
				"bzzr://cc8bbe33aa156cd273b4f60ef678bd489c9a052962323c48ae571625ec5f686a"
			]
		},
		"contracts/utility/interfaces/IContractFeatures.sol": {
			"keccak256": "0x021e780f03961a8498409da5e57e36844bb6d06e6c6acf8a895f23c4c260b33e",
			"urls": [
				"bzzr://825b4d839d0bca34665f11c61b52de5887cb068302a4cbd262c5bf994b16940d"
			]
		},
		"contracts/utility/interfaces/IContractRegistry.sol": {
			"keccak256": "0x4fc9f35a48ef73f00d5ea0a6fb2018eb5801f1c5b828935a34cfebf479084c86",
			"urls": [
				"bzzr://3f880643a62ae35a2592ea2f079452a9276dc1d54d5d1c33462738109c787db5"
			]
		},
		"contracts/utility/interfaces/IOwned.sol": {
			"keccak256": "0x03d97389586320f3dc96c0904ad6e9452da744861798d27b950a43769008a1dd",
			"urls": [
				"bzzr://30747c61f8bfa916f859e9bd52a83c03ff4c695d8f2296db6a94e9999f74a557"
			]
		},
		"contracts/utility/interfaces/ITokenHolder.sol": {
			"keccak256": "0x894a791236cbfdc5fd00d2d48f5be0b988d98804b89d9ce3f3c3c90477d590a1",
			"urls": [
				"bzzr://30f405a05448cc0f2efa99e3fc61ff424a8b6c1cee5c2ad05b5542fe41b58b39"
			]
		},
		"contracts/utility/interfaces/IWhitelist.sol": {
			"keccak256": "0x6f2de503926432c5e49191520bdb0c0463ed69924287529b0f83ef95565287fb",
			"urls": [
				"bzzr://75da01831a1c6509463537ea59b0cfc88349b8ebb5d3fc56a1260d0e1953acdc"
			]
		}
	},
	"version": 1
}